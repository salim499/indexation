[{"E:\\indexation\\src\\index.js":"1","E:\\indexation\\src\\App.js":"2","E:\\indexation\\src\\reportWebVitals.js":"3","E:\\indexation\\src\\FireStore.js":"4","E:\\indexation\\src\\getDataFromApi.js":"5","E:\\indexation\\src\\Result.js":"6","E:\\indexation\\src\\WordCloud.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":3906,"mtime":1609480787676,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":1212,"mtime":1609480341528,"results":"12","hashOfConfig":"9"},{"size":2532,"mtime":1609483127501,"results":"13","hashOfConfig":"9"},{"size":6013,"mtime":1609479095710,"results":"14","hashOfConfig":"9"},{"size":414,"mtime":1609102566462,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"bn064p",{"filePath":"19","messages":"20","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"E:\\indexation\\src\\index.js",[],["33","34"],"E:\\indexation\\src\\App.js",["35","36","37","38","39"],"import React from 'react'\nimport {useState,  useEffect, useRef } from 'react'\nimport logo from './logo.svg';\nimport './Searchbar.css'\nimport './App.css'\nimport Rs from './Result.js'\nimport firebase from './FireStore'\nimport GetData from './getDataFromApi'\n\n\n\nfunction App() {\n  const inputRef=useRef(null)\n  const [Data, setData]=useState([])\n  const [Mode, setMode]=useState(\"Mode1\")\n\n   function lancerIndexation(){\n    GetData()\n   }\n  function setModeF(e){\n     setMode(e.target.dataset.mode)\n  }\n\n  function submitRequestF(){\n    setData([])\n    let splitRequest=inputRef.current.value.split(\" \")\n    let words=splitRequest.filter(word=>word.length>0)\n\n    words.forEach(word=>{\n      // get the first part of word request\n      let firstPartR = word.substr(0, word.length / 2)  \n      // get the second part of word request\n      let secondPartR = word.substr(word.length / 2, word.length)\n      firebase.firestore().collection(\"WordsWeights\")\n      .get()\n      .then((data)=>{\n\n      data.forEach(e=>{\n      // get the first part of word bdd\n      let firstPartW = e.data().text.substr(0, e.data().text.length / 2)  \n      // get the second part of word bdd\n      let secondPartW = e.data().text.substr(e.data().text.length / 2, e.data().text.length)\n\n      ///////// Mode1\n      if(Mode===\"Mode1\"){\n        let count=0\n        for (let i = 0; i < firstPartR.length; i++) {\n          if(firstPartW.includes(firstPartR.charAt(i))){\n          count=count+1\n          }\n        }\n        for (let i = 0; i < secondPartR.length; i++) {\n          if(secondPartW.includes(secondPartR.charAt(i))){\n            count=count+1\n          }\n        }\n        if(word.length-count<1){      \n          //result.push({id:e.id,data:e.data()})\n          setData(Data => [...Data, {id:e.id,data:e.data()}]);\n        }\n      }\n      ////////// Mode 2\n      else if(Mode===\"Mode2\"){\n          if(\n            firstPartW.includes(firstPartR)||\n            secondPartW.includes(secondPartR)||\n            secondPartR.includes(secondPartW)||\n            firstPartR.includes(firstPartW)\n            ){\n              setData(Data => [...Data, {id:e.id,data:e.data()}]);\n            }  \n      }\n      ////////// Mode 3\n      else if(Mode===\"Mode3\"){\n          let count=0\n          for (let i = 0; i < word.length; i++) {\n            if(e.data().text.includes(word.charAt(i))){\n            count=count+1\n            }\n          }   \n          if(Math.abs(word.length-count)<1){      \n            //result.push({id:e.id,data:e.data()})\n            setData(Data => [...Data, {id:e.id,data:e.data()}]);\n          }      \n      }\n    }) \n  })\n})\n}\n\n\n  return(\n    <div className=\"App\">\n      <header className=\"App-header\">\n      <React.Fragment>\n      <nav>\n        <ul id=\"nav_bar\">\n          <li id=\"sign_in\" className=\"nav-links\"><a onClick={lancerIndexation} href=\"#\">Lancer indexation</a></li>       \n          <li id=\"sign_in\" className=\"nav-links\"><a onClick={setModeF} data-mode=\"Mode3\" href=\"#\">Mode3</a></li>\n          <li id=\"sign_in\" className=\"nav-links\"><a onClick={setModeF} data-mode=\"Mode2\" href=\"#\">Mode2</a></li>\n          <li id=\"sign_in\" className=\"nav-links\"><a onClick={setModeF} data-mode=\"Mode1\" href=\"#\">Mode1</a></li>\n        </ul>  \n      </nav>  \n        <div className=\"logo\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <img alt=\"Google\" src=\"https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png\"></img>\n        </div>\n        <div className=\"bar\">\n          <input className=\"searchbar\" type=\"text\" title=\"Search\" ref={inputRef}></input>\n        </div>\n        <div className=\"buttons\">\n          <button className=\"button\"  onClick={submitRequestF}>Recherche</button>\n         </div>\n    </React.Fragment>\n    </header>\n        <div className=\"results\">\n        <Rs Data={Data}></Rs>\n      </div>\n\n    </div>\n  ) \n}\n\nexport default App;\n","E:\\indexation\\src\\reportWebVitals.js",[],"E:\\indexation\\src\\FireStore.js",[],"E:\\indexation\\src\\getDataFromApi.js",[],"E:\\indexation\\src\\Result.js",["40","41","42"],"import React from 'react'\r\nimport {useState, useEffect, useRef} from 'react'\r\nimport WordCloud from './WordCloud'\r\nimport StarRatingComponent from \"react-star-rating-component\";\r\nimport './Result.css'\r\nimport firebase from 'firebase'\r\n\r\nfunction App(props){\r\n\r\n  function splitTable(table){\r\n    let compt=[]\r\n    let count=0\r\n    for(let i=0;i<table.length;i=i+5){\r\n      count++\r\n      compt.push(count)\r\n    }\r\n\r\n      return compt\r\n  }\r\n  function paginationNumber(e){\r\n    let limit=e.target.dataset[\"val\"]*5\r\n    setFileWords2(FileWords.slice(limit-5,limit))\r\n }\r\n\r\n    function showWordCloudF(e){\r\n           let a=e.target.dataset.val\r\n           if(FileWords2.find(el=>el.file===a).showWordCloud===false){\r\n            FileWords2.find(el=>el.file===a).showWordCloud=true\r\n            FileWords2.find(el=>el.file===a).nuage=\"Fermer-\" \r\n            FileWords2.find(el=>el.file===a).background=\"#ffffff\" \r\n           }else{\r\n            FileWords2.find(el=>el.file===a).showWordCloud=false      \r\n            FileWords2.find(el=>el.file===a).nuage=\"Nuage+\" \r\n            FileWords2.find(el=>el.file===a).background=\"none\"     \r\n           }\r\n           let b=[]\r\n           FileWords2.forEach(e=>{\r\n              b.push(e)\r\n           })\r\n            setFileWords2(b)\r\n    }\r\n    function numberVisitF(e){\r\n      let f= firebase\r\n             .firestore()\r\n             .collection(\"Props\")\r\n             .doc(e.target.dataset.val)\r\n             .get()\r\n             .then(d=>{\r\n              firebase\r\n              .firestore()\r\n              .collection(\"Props\")\r\n              .doc(e.target.dataset.val)\r\n              .update({ nbrVisites: d.data().nbrVisites+1}); \r\n             })\r\n\r\n    }\r\n\r\n    const nbrVisites=useRef(null) \r\n    let [FileWords2, setFileWords2]=useState([])\r\n    const [FileWords, setFileWords]=useState([])\r\n    let dataG=[]\r\n    useEffect(()=>{\r\n      let properties=[]\r\n    //get all files \r\n    setFileWords(null)\r\n      let files=[]\r\n     props.Data.forEach(element => {\r\n       if(files.includes(element.data.file)===false){\r\n          files.push(element.data.file)\r\n       }  \r\n     });\r\n     if(files.length===0){\r\n       setFileWords2([])\r\n       setFileWords([])\r\n     }\r\n     // let dataG=[]\r\n     files.forEach(file=>{\r\n      firebase.firestore().collection(\"Props\")\r\n      .doc(file)\r\n      .get()\r\n      .then(d=>(properties.push({id:d.id,prop:d.data()})))\r\n      let tab=[]\r\n       firebase.firestore().collection(\"WordsWeights\")\r\n       .get()\r\n       .then((data)=>{\r\n         data.forEach(e=>{\r\n           if(e.data().file===file){\r\n             let f=tab.find(el=>el.text===e.data().text)\r\n             if(!f){\r\n              tab.push({text:e.data().text, value:parseFloat(e.data().weight)})\r\n             }\r\n             else{\r\n               f.value=parseFloat(f.value)+parseFloat(e.data().weight)\r\n             }\r\n           }\r\n         })\r\n       })\r\n       dataG.push({\r\n         file:file,\r\n         word:tab,\r\n         showWordCloud:false,\r\n         nuage:\"Nuage +\",\r\n         background:\"none\"\r\n        })\r\n     })\r\n    /* dataG.forEach(element=>{\r\n       let f=properties.find(e=>element.file===e.id)\r\n       if(f){\r\n        element['prop']=f.prop\r\n       }\r\n     })*/\r\n     dataG.forEach(e=>{\r\n      firebase.firestore().collection(\"Props\")\r\n      .doc(e.file)\r\n      .get()\r\n      .then(d=>e.prop=d.data())\r\n      .then(()=>{\r\n      let compt=1\r\n      let tab=[]\r\n      for(let i=0;i<dataG.length;i=i+5){\r\n        tab.push(compt)\r\n        compt++\r\n      }\r\n      setFileWords(dataG)\r\n      setFileWords2(dataG.slice(0,5))\r\n      console.log(\"ddddddddddddddddddddddddddddd\")\r\n      })   \r\n    })\r\n\r\n\r\n    },[props])\r\n\r\n\r\n    return(\r\n    <React.Fragment>\r\n     {FileWords2 && FileWords2!==null?FileWords2.map((val,key)=>(\r\n         val.prop?\r\n        <div className=\"global\">\r\n          <div className=\"firstPart\" style={{background:\"white\"}}>\r\n          <h2>xlv,f,xxvxv<button className=\"myButton\" data-val={val.file} onClick={showWordCloudF}>{val.nuage}</button></h2>\r\n          <a\r\n          onClick={numberVisitF}\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n         <h2  data-val={val.file}>\r\n          {\r\n           (val.prop['title'])?(val.prop['title']):\r\n           (val.prop['description'])?(val.prop['description']):\r\n           (val.prop['keywords'])?(val.prop['keywords']):null      \r\n          }\r\n          </h2>\r\n         </a>\r\n          <p>\r\n          {\r\n           (val.prop['description'])?(val.prop['description']):\r\n           (val.prop['keywords'])?(val.prop['keywords']):null \r\n          }           \r\n          </p>\r\n          <p>\r\n          {\r\n          (val.prop['keywords'])?(val.prop['keywords']):\r\n          (val.prop['description'])?(val.prop['description']):null   \r\n          }           \r\n          </p>\r\n          <StarRatingComponent\r\n                             name=\"rate1\"\r\n                             starCount={5}\r\n                             value={val.prop.nbrVisites}\r\n                           />\r\n             <p ref={nbrVisites} data-val2={val.prop.nbrVisites}>nombres de visites : {val.prop.nbrVisites}</p>\r\n          </div>\r\n         {\r\n             val.showWordCloud?\r\n             <div className=\"secondPart\">\r\n             <div className=\"WordCloud\" style={{background:\"#000000\"}}>\r\n              <WordCloud words={val.word}></WordCloud>\r\n             </div>\r\n             </div>\r\n             :\r\n             null\r\n         }\r\n      </div>      \r\n      :null)):null}\r\n        <div className=\"Footer\">\r\n        {FileWords?splitTable(FileWords).map((val,key)=>(\r\n        <p>\r\n         <a onClick={paginationNumber}\r\n         data-val={val}\r\n         className=\"App-link\"\r\n         href=\"#\"\r\n         rel=\"noopener noreferrer\"\r\n       >\r\n       {val}\r\n       </a>\r\n       &ensp;\r\n       &nbsp;\r\n       </p> \r\n        )):null}\r\n        </div>\r\n    </React.Fragment>\r\n \r\n    )\r\n}\r\nexport default App","E:\\indexation\\src\\WordCloud.js",[],{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":2,"column":20,"nodeType":"49","messageId":"50","endLine":2,"endColumn":29},{"ruleId":"51","severity":1,"message":"52","line":98,"column":50,"nodeType":"53","endLine":98,"endColumn":89},{"ruleId":"51","severity":1,"message":"52","line":99,"column":50,"nodeType":"53","endLine":99,"endColumn":99},{"ruleId":"51","severity":1,"message":"52","line":100,"column":50,"nodeType":"53","endLine":100,"endColumn":99},{"ruleId":"51","severity":1,"message":"52","line":101,"column":50,"nodeType":"53","endLine":101,"endColumn":99},{"ruleId":"47","severity":1,"message":"54","line":43,"column":11,"nodeType":"49","messageId":"50","endLine":43,"endColumn":12},{"ruleId":"55","severity":1,"message":"56","line":131,"column":7,"nodeType":"57","endLine":131,"endColumn":14,"suggestions":"58"},{"ruleId":"51","severity":1,"message":"52","line":190,"column":10,"nodeType":"53","endLine":195,"endColumn":9},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'f' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dataG'. Either include it or remove the dependency array.","ArrayExpression",["61"],"no-global-assign","no-unsafe-negation",{"desc":"62","fix":"63"},"Update the dependencies array to be: [dataG, props]",{"range":"64","text":"65"},[3669,3676],"[dataG, props]"]